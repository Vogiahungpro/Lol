-- Roblox Executor Client with Discord Bot Katabump API Integration
-- Synced with index.js Discord bot endpoints and data structures

if _G.executed then return end
_G.executed = true

repeat task.wait() until game:IsLoaded()

-- Check for executor key
if not _G.EXECUTOR_KEY or _G.EXECUTOR_KEY == "" or _G.EXECUTOR_KEY == "your_key_here" then
    game.Players.LocalPlayer:Kick("Invalid executor key. Please set _G.EXECUTOR_KEY before running this script.")
    return
end

-- Services
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RbxAnalytics = game:GetService("RbxAnalyticsService")
local player = Players.LocalPlayer

-- Configuration - Synced with Discord Bot API (index.js)
local CONFIG = {
    API_BASE = "http://localhost:3000",
    -- Alternative ports to try if 3000 fails
    FALLBACK_PORTS = {3001, 8000, 8080, 5000},
    ENDPOINTS = {
        -- Legacy endpoints for backward compatibility
        STATUS = "/api/status",
        PROSES = "/api/proses",
        USERS = "/api/users",
        SYNC = "/api/sync",
        -- Enhanced v1 endpoints (matching index.js)
        V1_VALIDATE_KEY = "/api/v1/validate-key",
        V1_AUTH = "/api/v1/auth",
        V1_SYNC = "/api/v1/sync",
        V1_STATUS = "/api/v1/status",
        V1_LOG = "/api/v1/log"
    },
    TIMEOUT = 10000,
    MAX_RETRIES = 3,
    EXECUTOR_KEY = _G.EXECUTOR_KEY,
    SCRIPT_URL = "https://raw.githubusercontent.com/Vogiahungpro/Lol/refs/heads/main/Lol.wtf%20main"
}

-- Discord Bot Synced Executor
local DiscordKatabumpExecutor = {}
DiscordKatabumpExecutor.__index = DiscordKatabumpExecutor

function DiscordKatabumpExecutor.new()
    local self = setmetatable({}, DiscordKatabumpExecutor)
    self.authenticated = false
    self.userInfo = {}
    self.executorKey = CONFIG.EXECUTOR_KEY
    self.keyValidated = false
    self.hwidBound = false
    self.retryCount = 0
    self.discordUserId = nil
    self.whitelisted = false
    return self
end

-- Get user's IP address
function DiscordKatabumpExecutor:getIP()
    local success, result = pcall(function()
        local requestFunc = (http_request or request or (syn and syn.request))
        if requestFunc then
            local res = requestFunc({
                Url = "https://api.ipify.org?format=json",
                Method = "GET",
                Headers = { ["User-Agent"] = "DiscordKatabump/2.0" }
            })
            return res.Body
        else
            return game:HttpGet("https://api.ipify.org?format=json")
        end
    end)
    
    if success and result then
        local data
        pcall(function()
            data = HttpService:JSONDecode(result)
        end)
        if data and data.ip then
            return data.ip
        end
    end
    return "Unknown"
end

-- Prepare user information (matching Discord bot expectations)
function DiscordKatabumpExecutor:prepareUserInfo()
    self.userInfo = {
        username = player.Name,
        userId = tostring(player.UserId), -- Convert to string to match Discord bot expectations
        hwid = RbxAnalytics:GetClientId(),
        ip = self:getIP(),
        timestamp = os.time(),
        gameId = game.GameId,
        placeId = game.PlaceId,
        executorVersion = "DiscordKatabump-2.0",
        executorKey = self.executorKey,
        -- Additional fields for Discord bot sync
        robloxUserId = player.UserId,
        robloxUsername = player.Name,
        displayName = player.DisplayName or player.Name,
        accountAge = player.AccountAge
    }
end

-- Make HTTP request to Discord Bot API with enhanced error handling
function DiscordKatabumpExecutor:makeDiscordBotRequest(endpoint, method, data)
    local fullUrl = CONFIG.API_BASE .. endpoint
    
    print("üåê Making request to:", fullUrl)
    print("üì§ Method:", method or "GET")
    
    local headers = {
        ["Content-Type"] = "application/json",
        ["User-Agent"] = "DiscordKatabump/2.0",
        ["X-Executor-Key"] = self.executorKey,
        ["X-HWID"] = self.userInfo.hwid or "unknown"
    }
    
    local success, response = pcall(function()
        local jsonData = data and HttpService:JSONEncode(data) or nil
        if jsonData then
            print("üì¶ Request Data Length:", #jsonData, "characters")
        end
        
        local requestFunc = (http_request or request or (syn and syn.request))
        
        if requestFunc then
            print("üîß Using custom HTTP request function")
            local result = requestFunc({
                Url = fullUrl,
                Method = method or "GET",
                Headers = headers,
                Body = jsonData,
                Timeout = CONFIG.TIMEOUT
            })
            return result
        else
            print("üîß Using Roblox HttpService")
            if method == "POST" and jsonData then
                local body = game:HttpPost(fullUrl, jsonData, Enum.HttpContentType.ApplicationJson)
                return { Body = body, StatusCode = 200 }
            else
                local body = game:HttpGet(fullUrl)
                return { Body = body, StatusCode = 200 }
            end
        end
    end)
    
    if success and response then
        print("‚úÖ HTTP Request successful")
        print("üì• Response Status:", response.StatusCode or "Unknown")
        print("üìä Response Length:", response.Body and #response.Body or 0, "characters")
        
        local responseData
        local parseSuccess, parseError = pcall(function()
            responseData = HttpService:JSONDecode(response.Body)
        end)
        
        if parseSuccess then
            print("‚úÖ JSON Parse successful")
            return responseData, response.StatusCode
        else
            print("‚ùå JSON Parse failed:", parseError)
            print("üìÑ Raw Response:", response.Body and response.Body:sub(1, 200) or "Empty")
            return nil, response.StatusCode
        end
    else
        print("‚ùå HTTP Request failed:", response or "Unknown error")
        
        -- Specific error handling for connection issues
        if response and type(response) == "string" then
            if response:find("Connection refused") or response:find("ConnectFailure") then
                print("üö´ Connection refused - Discord bot may not be running")
                return nil, 0 -- Use status code 0 for connection refused
            elseif response:find("timeout") or response:find("Timeout") then
                print("‚è±Ô∏è Request timeout - Discord bot may be slow to respond")
                return nil, 408
            end
        end
        
        return nil, 500
    end
end

-- Try different ports if the main one fails
function DiscordKatabumpExecutor:tryFallbackPorts()
    print("üîÑ Trying fallback ports...")
    
    for _, port in ipairs(CONFIG.FALLBACK_PORTS) do
        local originalBase = CONFIG.API_BASE
        CONFIG.API_BASE = "http://localhost:" .. port
        
        print("üîç Trying port:", port)
        local responseData, statusCode = self:makeDiscordBotRequest(CONFIG.ENDPOINTS.STATUS, "GET")
        
        if responseData and responseData.status == "online" then
            print("‚úÖ Found Discord Bot API on port:", port)
            return true
        end
        
        -- Restore original if failed
        CONFIG.API_BASE = originalBase
    end
    
    print("‚ùå No working ports found")
    return false
end

-- Enhanced status check with fallback
function DiscordKatabumpExecutor:checkDiscordBotStatusWithFallback()
    -- Try main port first
    print("üì° Checking primary port 3000...")
    local success = self:checkDiscordBotStatus()
    
    if not success then
        print("üîÑ Primary port failed, trying fallback ports...")
        success = self:tryFallbackPorts()
        
        if success then
            -- Re-run status check with new port
            return self:checkDiscordBotStatus()
        end
    end
    
    return success
end

-- Validate executor key using legacy /api/proses endpoint (matching index.js)
function DiscordKatabumpExecutor:validateWithDiscordBot()
    if not self.userInfo.username then
        self:prepareUserInfo()
    end
    
    -- Use the /api/proses endpoint as defined in index.js
    local requestData = {
        userId = self.userInfo.userId,
        key = self.executorKey,
        action = "validate_and_auth",
        hwid = self.userInfo.hwid,
        username = self.userInfo.username,
        robloxUserId = self.userInfo.robloxUserId,
        ip = self.userInfo.ip,
        gameId = self.userInfo.gameId,
        placeId = self.userInfo.placeId,
        timestamp = self.userInfo.timestamp
    }
    
    local responseData, statusCode = self:makeDiscordBotRequest(CONFIG.ENDPOINTS.PROSES, "POST", requestData)
    
    if responseData and responseData.success then
        self.authenticated = true
        self.keyValidated = true
        
        if responseData.userData then
            self.discordUserId = responseData.userData.userId
            self.whitelisted = responseData.userData.isWhitelisted
            print("‚úÖ Discord Bot Authentication Success")
            print("üîë Executor Key Validated:", responseData.userData.executorKey or "Yes")
            print("üë§ Access Level:", responseData.userData.accessLevel or "CUSTOMER")
            print("üåê Katabump Ready:", responseData.userData.katabumpReady and "Yes" or "No")
            return true
        else
            player:Kick("Invalid response from Discord Bot API.")
            return false
        end
    else
        local errorMessage = "Discord Bot authentication failed."
        if responseData and responseData.message then
            errorMessage = responseData.message
        elseif statusCode == 400 then
            errorMessage = "Invalid executor key format."
        elseif statusCode == 401 then
            errorMessage = "Invalid executor key for this user."
        elseif statusCode == 403 then
            errorMessage = "User not whitelisted. Please redeem a key in Discord."
        end
        
        player:Kick(errorMessage)
        return false
    end
end

-- Enhanced validation using v1 API endpoints
function DiscordKatabumpExecutor:validateExecutorKeyV1()
    local requestData = {
        action = "validate_executor_key",
        executorKey = self.executorKey,
        hwid = self.userInfo.hwid,
        userId = self.userInfo.userId,
        username = self.userInfo.username,
        robloxUserId = self.userInfo.robloxUserId,
        timestamp = self.userInfo.timestamp
    }
    
    local responseData, statusCode = self:makeDiscordBotRequest(CONFIG.ENDPOINTS.V1_VALIDATE_KEY, "POST", requestData)
    
    if responseData and responseData.success and responseData.valid then
        self.keyValidated = true
        print("‚úÖ V1 API: Executor key validated")
        return true
    else
        player:Kick("V1 API: Invalid executor key. Access denied.")
        return false
    end
end

-- Authenticate using v1 API
function DiscordKatabumpExecutor:authenticateV1()
    local authData = {
        action = "authenticate",
        executorKey = self.executorKey,
        hwid = self.userInfo.hwid,
        userId = self.userInfo.userId,
        username = self.userInfo.username,
        robloxUserId = self.userInfo.robloxUserId,
        ip = self.userInfo.ip,
        gameId = self.userInfo.gameId,
        placeId = self.userInfo.placeId,
        timestamp = self.userInfo.timestamp,
        version = self.userInfo.executorVersion
    }
    
    local responseData, statusCode = self:makeDiscordBotRequest(CONFIG.ENDPOINTS.V1_AUTH, "POST", authData)
    
    if responseData and responseData.success then
        self.authenticated = true
        
        if responseData.whitelisted then
            self.hwidBound = true
            self.whitelisted = true
            print("‚úÖ V1 API: Authentication successful")
            return true
        else
            player:Kick("V1 API: Account not whitelisted. Please redeem a valid key in Discord.")
            return false
        end
    else
        player:Kick("V1 API: Authentication failed. Please try again later.")
        return false
    end
end

-- Sync HWID using v1 API
function DiscordKatabumpExecutor:syncHWIDV1()
    local syncData = {
        action = "sync_hwid",
        executorKey = self.executorKey,
        hwid = self.userInfo.hwid,
        userId = self.userInfo.userId,
        robloxUserId = self.userInfo.robloxUserId,
        timestamp = os.time()
    }
    
    local responseData, statusCode = self:makeDiscordBotRequest(CONFIG.ENDPOINTS.V1_SYNC, "POST", syncData)
    
    if responseData and responseData.success then
        self.hwidBound = true
        print("‚úÖ V1 API: HWID sync successful")
        return true
    else
        player:Kick("V1 API: HWID sync failed. Access denied.")
        return false
    end
end

-- Sync data with Discord Bot using legacy /api/sync endpoint
function DiscordKatabumpExecutor:syncWithDiscordBot()
    local syncData = {
        userId = self.userInfo.userId,
        keyData = {
            executorKey = self.executorKey,
            hwid = self.userInfo.hwid,
            lastAccess = os.time(),
            gameId = self.userInfo.gameId,
            placeId = self.userInfo.placeId
        },
        timestamp = os.time(),
        executorKey = self.executorKey,
        action = "lua_script_access"
    }
    
    local responseData, statusCode = self:makeDiscordBotRequest(CONFIG.ENDPOINTS.SYNC, "POST", syncData)
    
    if responseData and responseData.success then
        print("‚úÖ Discord Bot Sync: Data synchronized successfully")
        return true
    else
        print("‚ö†Ô∏è Discord Bot Sync: Failed to sync data (non-critical)")
        return false
    end
end

-- Get script from GitHub URL
function DiscordKatabumpExecutor:getScriptFromGitHub()
    local success, script = pcall(function()
        local requestFunc = (http_request or request or (syn and syn.request))
        if requestFunc then
            local response = requestFunc({
                Url = CONFIG.SCRIPT_URL,
                Method = "GET",
                Headers = { ["User-Agent"] = "DiscordKatabump/2.0" }
            })
            return response.Body
        else
            return game:HttpGet(CONFIG.SCRIPT_URL)
        end
    end)
    
    if success and script and script ~= "" then
        print("‚úÖ Script loaded from GitHub successfully")
        return script
    else
        player:Kick("Failed to load script from GitHub. Please try again.")
        return nil
    end
end

-- Execute script with validation
function DiscordKatabumpExecutor:executeScript(script)
    if not self.authenticated or not self.keyValidated then
        player:Kick("Invalid authentication state. Please restart.")
        return false
    end
    
    local success, result = pcall(function()
        local func = loadstring(script)
        if func then
            return func()
        else
            error("Failed to load script")
        end
    end)
    
    if success then
        self:logExecutionV1(true)
        print("‚úÖ Script executed successfully")
        return true
    else
        self:logExecutionV1(false, tostring(result))
        player:Kick("Script execution failed: " .. tostring(result))
        return false
    end
end

-- Log execution using v1 API endpoint
function DiscordKatabumpExecutor:logExecutionV1(success, error)
    pcall(function()
        local logData = {
            action = "log_execution",
            executorKey = self.executorKey,
            userId = self.userInfo.userId,
            robloxUserId = self.userInfo.robloxUserId,
            success = success,
            error = error,
            timestamp = os.time(),
            gameId = self.userInfo.gameId,
            placeId = self.userInfo.placeId,
            hwid = self.userInfo.hwid
        }
        
        self:makeDiscordBotRequest(CONFIG.ENDPOINTS.V1_LOG, "POST", logData)
    end)
end

-- Main execution flow (Silent with Discord Bot integration)
print("üöÄ Starting Discord Bot Katabump Integration...")

local executor = DiscordKatabumpExecutor.new()

-- Step 0: Check Discord Bot API status
print("üì° Checking Discord Bot API status...")
if not executor:checkDiscordBotStatus() then
    return
end

-- Step 1: Prepare user info
print("üë§ Preparing user information...")
executor:prepareUserInfo()

-- Step 2: Validate and authenticate with Discord Bot (Primary method)
print("üîê Authenticating with Discord Bot...")
local authResult = executor:validateWithDiscordBot()
if authResult ~= true then
    return
end

-- Step 3: Sync data with Discord Bot (Optional but recommended)
print("üîÑ Syncing data with Discord Bot...")
executor:syncWithDiscordBot()

-- Step 4: Get and execute script
print("üìú Loading script from GitHub...")
local script = executor:getScriptFromGitHub()
if script then
    print("‚ö° Executing script...")
    executor:executeScript(script)
else
    return
end

-- Store globally for manual access
_G.DiscordKatabumpExecutor = executor
_G.executor = executor -- Backward compatibility

print("‚úÖ Discord Bot Katabump Integration completed successfully!")
print("üîë Executor Key: " .. executor.executorKey:sub(1, 8) .. "...")
print("üë§ Discord User ID: " .. (executor.discordUserId or "Unknown"))
print("‚úÖ Whitelisted: " .. (executor.whitelisted and "Yes" or "No"))
print("üåê Authenticated: " .. (executor.authenticated and "Yes" or "No"))

return executor
